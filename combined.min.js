document.addEventListener('DOMContentLoaded', function(){setTimeout(() =>{checkLoginState()}, 100); document.addEventListener('visibilitychange', function(){if (!document.hidden){setTimeout(() =>{checkLoginState()}, 100)} }); window.addEventListener('focus', function(){setTimeout(() =>{checkLoginState()}, 100)})}); async function checkLoginState(){console.log('Checking login state...'); const currentUser = localStorage.getItem('currentUser'); const headerIcons = document.querySelector('.header-icons'); console.log('Current user from localStorage:', currentUser); console.log('Header icons element:', headerIcons); if (!headerIcons){console.error('Header icons element not found!'); return} if (currentUser){try{const user = JSON.parse(currentUser); console.log('User data:', user); headerIcons.innerHTML = ` <a href="profile.html" class="user-info"> <i class="fas fa-user"></i> <span class="user-name">${user.username || user.email}</span> </a> <a href="#" onclick="logout()" class="logout-btn"> <i class="fas fa-sign-out-alt"></i> Logout </a> <a href="#"><i class="fas fa-search"></i></a> <a href="cart.html" class="cart-icon"><i class="fas fa-shopping-bag"></i><span class="cart-count">0</span></a> `; console.log('Updated header for logged-in user'); if (typeof updateCartCount === 'function'){updateCartCount()} else{try{const currentUser = localStorage.getItem('currentUser'); if (currentUser){const user = JSON.parse(currentUser); const response = await fetch(`http: if (response.ok){const cartItems = await response.json(); const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems}); console.log('Cart count updated from database fallback to:', totalItems)} else{const cart = JSON.parse(localStorage.getItem('cart') || '[]'); const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems})} } else{document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'})} } catch (error){console.error('Error in fallback cart count:', error); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'})} } } catch (error){console.error('Error parsing user data:', error); localStorage.removeItem('currentUser'); checkLoginState()} } else{headerIcons.innerHTML = ` <a href="login.html"><i class="fas fa-user"></i> Login</a> <a href="signup.html"><i class="fas fa-user-plus"></i> Sign Up</a> <a href="#"><i class="fas fa-search"></i></a> <a href="cart.html" class="cart-icon"><i class="fas fa-shopping-bag"></i><span class="cart-count">0</span></a> `; console.log('Updated header for logged-out user'); if (typeof updateCartCount === 'function'){updateCartCount()} else{try{const currentUser = localStorage.getItem('currentUser'); if (currentUser){const user = JSON.parse(currentUser); const response = await fetch(`http: if (response.ok){const cartItems = await response.json(); const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems}); console.log('Cart count updated from database fallback to:', totalItems)} else{const cart = JSON.parse(localStorage.getItem('cart') || '[]'); const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems})} } else{document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'})} } catch (error){console.error('Error in fallback cart count:', error); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'})} } } } function logout(){localStorage.removeItem('currentUser'); localStorage.removeItem('authToken'); checkLoginState(); showMessage('Logged out successfully', 'success')} function showMessage(message, type){let messageDiv = document.getElementById('message'); if (!messageDiv){messageDiv = document.createElement('div'); messageDiv.id = 'message'; messageDiv.className = 'message-container'; document.body.appendChild(messageDiv)} messageDiv.textContent = message; messageDiv.className = `message-container ${type}`; setTimeout(() =>{messageDiv.textContent = ''; messageDiv.className = 'message-container'}, 3000)} function debugLoginState(){console.log('=== LOGIN STATE DEBUG ==='); console.log('localStorage currentUser:', localStorage.getItem('currentUser')); console.log('localStorage authToken:', localStorage.getItem('authToken')); console.log('Header icons element:', document.querySelector('.header-icons')); console.log('Header icons HTML:', document.querySelector('.header-icons')?.innerHTML); checkLoginState(); console.log('=== END DEBUG ===')} window.checkLoginState = checkLoginState; window.logout = logout; window.showMessage = showMessage; window.debugLoginState = debugLoginState; window.forceCheckLoginState = function(){console.log('=== FORCE CHECKING LOGIN STATE ==='); checkLoginState(); console.log('=== END FORCE CHECK ===')}; document.addEventListener('DOMContentLoaded', function(){setTimeout(() =>{checkLoginState(); let retryCount = 0; const maxRetries = 10; async function tryUpdateCartCount(){if (typeof updateCartCount === 'function'){await updateCartCount(); console.log('Cart count updated via main.js function')} else if (retryCount < maxRetries){retryCount++; setTimeout(tryUpdateCartCount, 100)} else{console.log('Using fallback cart count update'); try{const currentUser = localStorage.getItem('currentUser'); if (currentUser){const user = JSON.parse(currentUser); const response = await fetch(`http: if (response.ok){const cartItems = await response.json(); const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems}); console.log('Cart count updated from database fallback to:', totalItems)} else{const cart = JSON.parse(localStorage.getItem('cart') || '[]'); const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems})} } else{document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'})} } catch (error){console.error('Error in fallback cart count:', error); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'})} } } tryUpdateCartCount()}, 100)}); document.addEventListener('DOMContentLoaded', function(){console.log('Urban Nucleus - Main.js loaded successfully'); initializeScrollToTop(); initializeMobileMenu(); initializeProductInteractions(); initializeCarousels(); initializeAnnouncementBar(); initializeProductGalleries(); initializeFormEnhancements(); initializeUIEnhancements(); console.log('All Urban Nucleus functionality initialized')}); function initializeScrollToTop(){const scrollToTopBtn = document.getElementById('scrollToTop'); if (!scrollToTopBtn) return; window.addEventListener('scroll', function(){if (window.pageYOffset > 300){scrollToTopBtn.style.display = 'block'; scrollToTopBtn.classList.add('visible')} else{scrollToTopBtn.style.display = 'none'; scrollToTopBtn.classList.remove('visible')} }); scrollToTopBtn.addEventListener('click', function(){window.scrollTo({top: 0, behavior: 'smooth' })})} function initializeMobileMenu(){const mobileMenuBtn = document.querySelector('.mobile-menu-btn'); const mobileMenu = document.querySelector('.mobile-menu'); const mobileMenuClose = document.querySelector('.mobile-menu-close'); if (mobileMenuBtn && mobileMenu){mobileMenuBtn.addEventListener('click', function(){mobileMenu.classList.add('active'); document.body.style.overflow = 'hidden'})} if (mobileMenuClose && mobileMenu){mobileMenuClose.addEventListener('click', function(){mobileMenu.classList.remove('active'); document.body.style.overflow = ''})} if (mobileMenu){document.addEventListener('click', function(event){if (!mobileMenu.contains(event.target) && !mobileMenuBtn.contains(event.target) && mobileMenu.classList.contains('active')){mobileMenu.classList.remove('active'); document.body.style.overflow = ''} })} } function initializeProductInteractions(){document.addEventListener('click', function(e){if (e.target.closest('.quick-view')){e.preventDefault(); const btn = e.target.closest('.quick-view'); const productId = btn.getAttribute('data-product-id'); if (productId){openQuickView(productId)} } }); document.addEventListener('click', function(e){if (e.target.closest('.add-to-cart-btn')){e.preventDefault(); const btn = e.target.closest('.add-to-cart-btn'); const productId = btn.getAttribute('data-product-id'); if (productId){addToCart(productId, btn)} } }); document.addEventListener('click', function(e){if (e.target.closest('.add-to-wishlist')){e.preventDefault(); const btn = e.target.closest('.add-to-wishlist'); const productId = btn.getAttribute('data-product-id'); if (productId){toggleWishlist(productId, btn)} } }); document.addEventListener('click', function(e){if (e.target.closest('.buy-now-btn')){e.preventDefault(); const btn = e.target.closest('.buy-now-btn'); const productId = btn.getAttribute('data-product-id'); if (productId){buyNow(productId)} } }); document.querySelectorAll('.product-card, .drop-product-card').forEach(card =>{card.addEventListener('mouseenter', function(){this.style.transform = 'translateY(-8px) scale(1.02)'}); card.addEventListener('mouseleave', function(){this.style.transform = 'translateY(0) scale(1)'})})} function openQuickView(productId){const modal = document.querySelector('.quick-view-modal'); const modalContent = modal.querySelector('.quick-view-product'); if (!modal || !modalContent) return; modalContent.innerHTML = '<div class="loading-spinner">Loading product details...</div>'; modal.style.display = 'block'; fetch(`http: .then(response => response.json()) .then(product =>{modalContent.innerHTML = ` <div class="quick-view-content"> <div class="quick-view-image"> <img src="${product.images && product.images.length > 0 ? product.images[0] : 'uploads/images/placeholder.png'}" alt="${product.name}"> </div> <div class="quick-view-details"> <h3>${product.name}</h3> <p class="price">₹${product.price}</p> <div class="quick-view-actions"> <button class="btn-primary" onclick="window.location.href='product-detail.html?id=${product.id}'">View Details</button> <button class="btn-dark" onclick="addToCart('${product.id}', this)">Add to Cart</button> </div> </div> </div> `}) .catch(error =>{modalContent.innerHTML = '<div class="error-message">Unable to load product details. Please try again.</div>'})} function closeQuickView(){const modal = document.querySelector('.quick-view-modal'); if (modal){modal.style.display = 'none'} } function addToCart(productId, button){if (!button) return; const originalText = button.innerHTML; button.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Adding...'; button.disabled = true; fetch(`http: .then(response => response.json()) .then(product =>{const cartItem ={id: product.id, name: product.name, price: product.price, image: product.images && product.images.length > 0 ? product.images[0] : 'uploads/images/placeholder.png', quantity: 1 }; let cart = JSON.parse(localStorage.getItem('cart') || '[]'); const existingItem = cart.find(item => item.id === productId); if (existingItem){existingItem.quantity += 1} else{cart.push(cartItem)} localStorage.setItem('cart', JSON.stringify(cart)); updateCartCount(); showNotification('success', 'Added to Cart', `${product.name} has been added to your cart!`); button.innerHTML = originalText; button.disabled = false}) .catch(error =>{console.error('Error adding to cart:', error); showNotification('error', 'Error', 'Failed to add product to cart. Please try again.'); button.innerHTML = originalText; button.disabled = false})} async function updateCartCount(){try{const currentUser = localStorage.getItem('currentUser'); if (!currentUser){document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = '0'}); return} const user = JSON.parse(currentUser); const userId = user.id; const response = await fetch(`http: if (response.ok){const cartItems = await response.json(); const totalItems = cartItems.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems}); console.log('Cart count updated from database to:', totalItems)} else{console.error('Failed to fetch cart count'); const cart = JSON.parse(localStorage.getItem('cart') || '[]'); const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems}); console.log('Cart count updated from localStorage fallback to:', totalItems)} } catch (error){console.error('Error updating cart count:', error); const cart = JSON.parse(localStorage.getItem('cart') || '[]'); const totalItems = cart.reduce((sum, item) => sum + item.quantity, 0); document.querySelectorAll('.cart-count').forEach(countElement =>{countElement.textContent = totalItems}); console.log('Cart count updated from error fallback to:', totalItems)} } function toggleWishlist(productId, button){let wishlist = JSON.parse(localStorage.getItem('wishlist') || '[]'); const isInWishlist = wishlist.includes(productId); if (isInWishlist){wishlist = wishlist.filter(id => id !== productId); button.classList.remove('active'); showNotification('info', 'Removed from Wishlist', 'Product removed from your wishlist')} else{wishlist.push(productId); button.classList.add('active'); showNotification('success', 'Added to Wishlist', 'Product added to your wishlist')} localStorage.setItem('wishlist', JSON.stringify(wishlist))} function buyNow(productId){fetch(`http: .then(response => response.json()) .then(product =>{const productData ={id: product.id, name: product.name, price: parseFloat(product.price), image: product.images && product.images.length > 0 ? product.images[0] : 'uploads/images/placeholder.png', quantity: 1, sku: product.sku || '', category: product.category || '' }; const encodedData = encodeURIComponent(JSON.stringify(productData)); window.location.href = `checkout.html?product=${encodedData}`}) .catch(error =>{console.error('Error with buy now:', error); showNotification('error', 'Error', 'Failed to process buy now. Please try again.')})} function initializeCarousels(){initializeTestimonialsCarousel(); initializeNewArrivalsCarousel(); initializeHeroSlider()} function initializeTestimonialsCarousel(){const testimonialContainer = document.querySelector('.testimonials-container'); if (!testimonialContainer) return; let currentSlide = 0; const slides = document.querySelectorAll('.testimonial-slide'); const dots = document.querySelectorAll('.testimonial-dot'); const totalSlides = slides.length; if (totalSlides === 0) return; function showTestimonialSlide(index){slides.forEach((slide, i) =>{slide.style.display = i === index ? 'block' : 'none'}); dots.forEach((dot, i) =>{dot.classList.toggle('active', i === index)})} function nextTestimonialSlide(){currentSlide = (currentSlide + 1) % totalSlides; showTestimonialSlide(currentSlide)} function prevTestimonialSlide(){currentSlide = (currentSlide - 1 + totalSlides) % totalSlides; showTestimonialSlide(currentSlide)} const nextBtn = document.querySelector('.next-testimonial'); const prevBtn = document.querySelector('.prev-testimonial'); if (nextBtn) nextBtn.addEventListener('click', nextTestimonialSlide); if (prevBtn) prevBtn.addEventListener('click', prevTestimonialSlide); dots.forEach((dot, index) =>{dot.addEventListener('click', () =>{currentSlide = index; showTestimonialSlide(currentSlide)})}); setInterval(nextTestimonialSlide, 5000); showTestimonialSlide(0)} function initializeNewArrivalsCarousel(){const newArrivalsContainer = document.querySelector('.new-arrivals-container'); if (!newArrivalsContainer) return; console.log('New Arrivals carousel container found')} function initializeHeroSlider(){console.log('Hero slider initialization handled in index.html')} function initializeAnnouncementBar(){const announcementBar = document.querySelector('.announcement-bar'); if (!announcementBar) return; const closeBtn = announcementBar.querySelector('.announcement-close'); if (closeBtn){closeBtn.addEventListener('click', function(){announcementBar.style.display = 'none'; localStorage.setItem('announcementClosed', 'true')})} if (localStorage.getItem('announcementClosed') === 'true'){announcementBar.style.display = 'none'} } function initializeProductGalleries(){document.querySelectorAll('.product-gallery').forEach(gallery =>{const mainImage = gallery.querySelector('.main-image'); const thumbnails = gallery.querySelectorAll('.thumbnail'); if (mainImage && thumbnails.length > 0){thumbnails.forEach(thumbnail =>{thumbnail.addEventListener('click', function(){const newSrc = this.getAttribute('data-src'); if (newSrc){mainImage.src = newSrc; thumbnails.forEach(thumb => thumb.classList.remove('active')); this.classList.add('active')} })})} })} function initializeFormEnhancements(){document.querySelectorAll('form').forEach(form =>{form.addEventListener('submit', function(e){const requiredFields = this.querySelectorAll('[required]'); let isValid = true; requiredFields.forEach(field =>{if (!field.value.trim()){isValid = false; field.classList.add('error')} else{field.classList.remove('error')} }); if (!isValid){e.preventDefault(); showNotification('error', 'Validation Error', 'Please fill in all required fields.')} })}); document.querySelectorAll('.quantity-controls').forEach(control =>{const minusBtn = control.querySelector('.quantity-minus'); const plusBtn = control.querySelector('.quantity-plus'); const input = control.querySelector('.quantity-input'); if (minusBtn && plusBtn && input){minusBtn.addEventListener('click', function(){const currentValue = parseInt(input.value) || 1; if (currentValue > 1){input.value = currentValue - 1} }); plusBtn.addEventListener('click', function(){const currentValue = parseInt(input.value) || 1; input.value = currentValue + 1})} }); document.querySelectorAll('.size-option').forEach(option =>{option.addEventListener('click', function(){this.parentNode.querySelectorAll('.size-option').forEach(opt =>{opt.classList.remove('active')}); this.classList.add('active')})})} function initializeUIEnhancements(){document.querySelectorAll('a[href^="#"]').forEach(link =>{link.addEventListener('click', function(e){e.preventDefault(); const targetId = this.getAttribute('href').substring(1); const targetElement = document.getElementById(targetId); if (targetElement){targetElement.scrollIntoView({behavior: 'smooth', block: 'start' })} })}); document.querySelectorAll('.collection-item').forEach(item =>{item.addEventListener('mouseenter', function(){this.style.transform = 'translateY(-8px)'}); item.addEventListener('mouseleave', function(){this.style.transform = 'translateY(0)'})}); document.querySelectorAll('.social-links a').forEach(link =>{link.addEventListener('mouseenter', function(){this.style.transform = 'translateY(-3px) scale(1.1)'}); link.addEventListener('mouseleave', function(){this.style.transform = 'translateY(0) scale(1)'})}); document.querySelectorAll('.footer-col ul li a').forEach(link =>{link.addEventListener('mouseenter', function(){this.style.paddingLeft = '20px'}); link.addEventListener('mouseleave', function(){this.style.paddingLeft = '15px'})})} function showNotification(type, title, message, duration = 5000){let container = document.getElementById('notificationContainer'); if (!container){container = document.createElement('div'); container.id = 'notificationContainer'; container.style.cssText = ` position: fixed; top: 80px; right: 20px; z-index: 10002; max-width: 400px; `; document.body.appendChild(container)} const notification = document.createElement('div'); notification.className = `notification notification-${type}`; notification.style.cssText = ` background: ${type === 'success' ? '#4CAF50' : type === 'error' ? '#f44336' : type === 'warning' ? '#ff9800' : '#2196F3'}; color: white; padding: 15px 20px; margin-bottom: 10px; border-radius: 8px; box-shadow: 0 4px 12px rgba(0,0,0,0.15); transform: translateX(100%); transition: transform 0.3s ease; cursor: pointer; `; notification.innerHTML = ` <div style="display: flex; align-items: center; gap: 10px;"> <i class="fas fa-${getNotificationIcon(type)}"></i> <div> <strong>${title}</strong> <div style="font-size: 0.9em; opacity: 0.9;">${message}</div> </div> </div> `; container.appendChild(notification); setTimeout(() =>{notification.style.transform = 'translateX(0)'}, 100); setTimeout(() =>{notification.style.transform = 'translateX(100%)'; setTimeout(() =>{if (notification.parentNode){notification.parentNode.removeChild(notification)} }, 300)}, duration); notification.addEventListener('click', function(){this.style.transform = 'translateX(100%)'; setTimeout(() =>{if (this.parentNode){this.parentNode.removeChild(this)} }, 300)})} function getNotificationIcon(type){const icons ={success: 'check-circle', error: 'exclamation-circle', warning: 'exclamation-triangle', info: 'info-circle' }; return icons[type] || 'info-circle'} function debounce(func, wait){let timeout; return function executedFunction(...args){const later = () =>{clearTimeout(timeout); func(...args)}; clearTimeout(timeout); timeout = setTimeout(later, wait)}} function throttle(func, limit){let inThrottle; return function(){const args = arguments; const context = this; if (!inThrottle){func.apply(context, args); inThrottle = true; setTimeout(() => inThrottle = false, limit)} }} window.closeQuickView = closeQuickView; window.addToCart = addToCart; window.toggleWishlist = toggleWishlist; window.buyNow = buyNow; window.showNotification = showNotification; window.updateCartCount = updateCartCount; document.addEventListener('DOMContentLoaded', function(){updateCartCount()}); document.addEventListener('DOMContentLoaded', function(){const quantityBtns = document.querySelectorAll('.quantity-btn'); quantityBtns.forEach(btn =>{btn.addEventListener('click', function(){const input = this.parentElement.querySelector('.quantity-input'); let value = parseInt(input.value); if (this.textContent === '+' && value < 10){input.value = value + 1} else if (this.textContent === '-' && value > 1){input.value = value - 1} })}); const removeBtns = document.querySelectorAll('.remove-item'); removeBtns.forEach(btn =>{btn.addEventListener('click', function(){this.closest('.cart-item').remove(); updateCartCount(-1)})}); function updateCartCount(change){const cartCount = document.querySelector('.cart-count'); if (cartCount){let count = parseInt(cartCount.textContent) + change; cartCount.textContent = count > 0 ? count : 0} } const checkoutBtn = document.querySelector('.checkout-btn'); if (checkoutBtn){checkoutBtn.addEventListener('click', function(e){window.location.href = 'checkout.html'})} }); function proceedToCheckout(){const currentUser = localStorage.getItem('currentUser'); if (!currentUser){alert('Please login to proceed to checkout'); window.location.href = 'login.html'; return} if (window.cartItems && window.cartItems.length === 0){alert('Your cart is empty'); return} window.location.href = 'checkout.html'} function updateUserInterface(){const loginLink = document.getElementById('loginLink'); const signupLink = document.getElementById('signupLink'); if (loginLink && signupLink){const currentUser = localStorage.getItem('currentUser'); if (currentUser){loginLink.href = 'profile.html'; loginLink.innerHTML = `<i class="fas fa-user"></i> ${currentUser.username}`; signupLink.style.display = 'none'} else{loginLink.href = 'login.html'; loginLink.innerHTML = '<i class="fas fa-user"></i> Login'; signupLink.style.display = 'inline'} } }